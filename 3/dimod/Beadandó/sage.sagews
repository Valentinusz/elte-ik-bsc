︠692b31ed-6fbf-42fd-a852-f0394e67c826os︠
#3
def generateOrnament(f, interval):
    #select random x coordinate on function interval
    xCoordinate = uniform(interval[0], interval[1])

    #generate random point between (xCoordinate, f(xCoordinate) and (-xCoordinate, f(xCoordinate)))
    point = (uniform(xCoordinate, -1 * xCoordinate), f(x=xCoordinate))

    disc_color = choice(list(colors))

    return (disk(point, 1/2, (0,2*pi), color=disc_color))

def plotTree(levels):
    if levels < 2:
        raise ValueError


    #draw stump
    plane  = plot(line([(-2.8,-1),(-2.8,2.87)], color='brown'))
    plane += plot(line([( 2.8,-1),( 2.8,2.87)], color='brown'))


    #draw first level
    var('x')
    bottom = ((1 / 120) * x^2 + 2.8)
    left   = (1 / 15) * (x+14)^2 + 4.5
    right  = (1 / 15) * (x-14)^2 + 4.5
    plane += plot(bottom, -13.94, 13.94, color='green')
    plane += plot(left,   -14   , -4.3 , color='green')
    plane += plot(right,    4.3 , 14   , color='green')

    for i in [1..randrange(1,6)]:
        plane += generateOrnament(left, (-14, -4.3))

    #draw inner levels
    baseHeight = 10
    for i in [2..levels-1]:
        left_bottom = (1 / 83) * (x+10)^2 + baseHeight + 0.4
        left = (1/20) * (x+14)^2 + baseHeight

        right_bottom = (1 / 83) * (x-10)^2 + baseHeight + 0.4
        right = (1/20) * (x-14)^2 + baseHeight

        plane += plot(left_bottom, -11, -2.9, color='green')
        plane += plot(left,   -11   , -2.5 , color='green')
        plane += plot(right_bottom,    2.9 , 11   , color='green')
        plane += plot(right,    2.5 , 11   , color='green')

        for i in [1..randrange(1,6)]:
            plane += generateOrnament(left, (-11, -2.5))

        baseHeight += 5.2


    #draw final level
    left_bottom = (1 / 83) * (x+10)^2 + baseHeight + 0.8
    left = (1/10) * (x+10)^2 + baseHeight + 0.8

    right_bottom = (1 / 83) * (x-10)^2 + baseHeight + 0.8
    right = (1/10) * (x-10)^2 + baseHeight + 0.8

    plane += plot(left_bottom, -10, -2, color='green')
    plane += plot(left,   -10   , 0 , color='green')
    plane += plot(right_bottom,    2 , 10   , color='green')
    plane += plot(right,    0 , 10   , color='green')

    for i in [1..randrange(1,6)]:
        plane += generateOrnament(left, (-10, 0))

    #draw star

    plane += plot(-3.2 * abs(x) + baseHeight + 11.6, -0.47, 0.47, color='goldenrod')
    plane += plot((3/4) * x + baseHeight + 10.44, -0.46, 0.74, color='goldenrod')
    plane += plot((-3/4) * x + baseHeight + 10.44, -0.74, 0.46, color='goldenrod')
    plane += plot(line([(-0.6,baseHeight + 11),(0.74,baseHeight + 11)], color='goldenrod'))

    plane.show()

plotTree(5)
︡6269191e-780f-4a60-b95f-8c4ce40fd47b︡{"file":{"filename":"/tmp/tmp4ji8b5qn/tmp_724k4pp6.svg","show":true,"text":null,"uuid":"ef609eed-5dcd-4f56-8252-ad3eee825ab4"},"once":false}︡{"done":true}
︠63d7c191-e89c-4a05-b57f-7f8a839ff0fas︠
#4
def createPolynomial(n):
    return RR['x']([fibonacci(i) for i in [0..n]])

poly = createPolynomial(10)
poly.roots()
︡d83140e8-68bb-4111-84e3-5ababf4ea535︡{"stdout":"[(-0.673662957503106, 1), (0.000000000000000, 1)]\n"}︡{"done":true}
︠1291ca7d-1a5c-4b9b-9485-8dcd70297757s︠
#5
def sleighsSecret(num_of_people_in_group, required_num_of_people_per_group, secret):
    # check if the two arrays are of the same size, and there is no group where the required amount of people is bigger than the number of people in the given group
    for i in range(max(len(required_num_of_people_per_group), len(num_of_people_in_group))-1):
        try:
            if required_num_of_people_per_group[i] > num_of_people_in_group[i]:
                raise ValueError
        except IndexError:
            raise ValueError

    secret = create_secret(secret)

    result = []
    prime = next_prime(max(sum(num_of_people_in_group), secret) + randint(0,secret))

    # the two arrays are the same size at this point
    index = 1
    for group_index in range(len(num_of_people_in_group)):
        ranks.append([])
        coeff = [randrange(prime) for i in [1..required_num_of_people_per_group[group_index]-1]]
        coeff.append(secret)
        coeff.reverse()
        poly = GF(prime)['x'](coeff)
        group_result = []

        for i in [1..num_of_people_in_group[group_index]]:
            group_result.append((index, poly(index)))
            ranks[group_index].append(index)
            index += 1

        #print(ranks)
        result.append(group_result)

    return prime, result

def sleighsComputeSecret(prime, secret_parts):
    # put secret parts into their respective secret_parts list
    rank_count = len(ranks)-1

    secret_parts_per_group = [[] for i in [0..rank_count]]

    for part in secret_parts:
        for rank in [0..rank_count]:
            if part[0] in ranks[rank]:
                secret_parts_per_group[rank].append(part)
                break

    result = []

    # iterate through secret_parts list and add result to result
    for rank in [0..rank_count]:
        result.append(GF(prime)['x'].lagrange_polynomial(secret_parts_per_group[rank]).constant_coefficient())

    return result

def create_secret(secret):
    res = 0
    index = 0
    secret = list(secret)
    secret.reverse()
    for ch in secret:
        res += ord(ch) * 256^index
        index += 1
    return res

ranks = []
prime, secret_parts = sleighsSecret([5, 7, 9], [2, 4, 7], 100 * 'a')

ranks
secret_parts

def decode_secret(scr, msglen):
    result = ""
    secret = int(scr)
    index = 1
    while (secret != 0):
        divisor = 256^(msglen-index)
        result += chr(secret // divisor)
        secret %= divisor
        index += 1
    return result


one, two, three = sleighsComputeSecret(prime, [secret_parts[0][0], secret_parts[0][1], secret_parts[1][0], secret_parts[1][1], secret_parts[2][0], secret_parts[2][1], secret_parts[2][2], secret_parts[2][3], secret_parts[2][4], secret_parts[2][5], secret_parts[2][6]])
decode_secret(one,100)
decode_secret(two,100)
decode_secret(three,100)
︡4eb31c4c-92ea-46fd-bbcd-c9982da928b3︡{"stdout":"[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18, 19, 20, 21]]\n"}︡{"stdout":"[[(1, 3706058822299192306844969945722303726068911943591526267673732241612211421860930268259265542437873216873732279832310573136040735600152687460483329111892853824245806830171979143442198866817432101444213817817697603654047864102356754635872440833), (2, 559985423079962512907164145568088791692816318345337590800205655539618922649876048432301886630216075478807758611631602252922331545071712164234115850040825797045536775745733257435130507929146277886120565476181797462931330386828596442275268320), (3, 1729583853264072997847249292467012100808624115801008597460459435421980885419393332622630474226752954305229445002518550591899483770912327417677266385164697211600244448220224510010981948340907946394218279116699007421983106020027638351704979328), (4, 2899182283448183482787334439365935409924431913256679604120713215304342848188910616812959061823289833131651131393405498930876635996752942671120416920288568626154952120694715762586833388752669614902315992757216217381034881653226680261134690336), (5, 4068780713632293967727419586264858719040239710712350610780966995186704810958427901003287649419826711958072817784292447269853788222593557924563567455412440040709659793169207015162684829164431283410413706397733427340086657286425722170564401344)], [(6, 2636819859549982985671100761286260424168769325422641148228128054679376352115897452896787937525417684576433430544009274882947375619850773462390999532912387123524714656558840344766746990299407254069774606643299045952268069333205112641591881346), (7, 1597776260808291081886032370549582606880935622756421251517408655053898738122530872385144609764343826491584005372225571679353532958668124684784086284146471366593629262929307564250792056114669729657888125951444417670807857997749665169239578044), (8, 3118569724743636991465260659997881220807412712808930683917065411697272562526917224926853982331083877447987215228407586878076430278863390139578422592780919523812625390295671119101498042777775595794951629380217296631717678294804760093529934751), (9, 3185929869846777647644250881153662121233514312438288768026515487454520651982981086966145155073098752629494399779648486320148061746164173693233339361561038350480690714124068884912138195878077329137470890114193486551509949798361580776587675023), (10, 2102258144011810262536359232592569406936457561204474509978956411125620295125218538964539471242043387441303106304607355068695977807219669761900531290208034043651790636781375875858905560304974898408142647319981807296865401431138510683564405937), (11, 169955995132832048254941912890247176693459598667466915907585711510548780588125661383558274089572717288610882081943278186847728908679072761731693078443112800379890560634467106117993180947868272329663640164191078734464762115853933279611734570), (12, 2007096700507280495791246067675477772773640987089104675479381283364237858986770038702015150271535697797961482001881259959826421778113167658570883222963380259473933614950954728448513901996204911690921573795463136881157070123953432132908151520)], [(13, 123706184985759891129273073862983081148628134897574936090150480039724983705680562681276744674402744980470546827393873251471009030769872892249920437535608410708574725866569559756871604513629245188927275509249122559295341830208204099331846771), (14, 3041067199162588075510040301858931533797946200718909031890603599879787683993407763394621299063849157959758148034362572864558755602924656330790809526102106144223329222728835570611721990867852617104161298765974169513081189255289565390082014385), (15, 3406132760869980431696195082886162150385167899926025681500009261013202993272350826313829302965191734568481644330151419196444206641793767460861023306930716889745440533801347358796692347077684634179061885263437812461681581576751452974604744603), (16, 1307877105792977714897530647884420106233927301545544962765357796300114775848483608690456687138446710175978468164608333132429432818058826169867040597411653632092509467954733460163863456339619104312093286748262789380593180362606009890566884159), (17, 2254214994092215689514633803811403772618135271950668785603509436906485446987522230710652687566317747060899289313708267678540551483257774635816164383079194242871897029967219812430122003775003549785463949791855107150907362840452190798666235646), (18, 4299787967501399504886345085197196291862062649902628897938975154224314408347140343558703778744563666450708974194418085798540379697976941100961994799698377255261804585480577524719701576413947592322825168957191465166651296665929702354663965116), (19, 3235346313112333841544600918300915250992166863814821008034696000481806602750971463091681636460961914188751915012010393520139386291058733968878127484694564947498726192969641426377157440117957042848554389586405970736018112219576829963498591806), (20, 2891711245637487991342984956710165723464951723134045972614479850178627802362683857073318399850285699364843105905128570644118274107060194575882985906998175409806339922023187979302015695541151219750050262263077097825981244385910550606400909427), (21, 348614502326713919313751959011328974527536424925840266040632980661565396396127457846063528895936664359961512807641564501693298475511274788969241096473287502480994069631012583724658218029731051179702687074983776099114778373638531019821654369)]]"}︡{"stdout":"\n"}︡{"stdout":"'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n"}︡{"stdout":"\"\\t4=÷*WO\\x0f\\x8eUÿ-òßb\\x95¿þ\\x8bTÀbA\\x9eð\\x05\\x11't\\x87+=ò\\x0c]/Ü¤(ý/sýÌAÜN6ÅÓÕ\\x93ø\\x07nô¬è\\x8bò%JìG/rxRÝ\\x9aýX|c\\x98ËÖý¬\\x97ò\\x93$Ä4ü\\x8d\\x1e¢1f¿XP¬\\x9c\\x9cßK¤\"\n"}︡{"stdout":"'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'\n"}︡{"done":true}









